<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Hugo 主题 MemE</title><link>https://Tri0mpheL.github.io/</link><description>MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</description><generator>Hugo 0.131.0 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>reuixiy@gmail.com (coyote)</managingEditor><webMaster>reuixiy@gmail.com (coyote)</webMaster><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><lastBuildDate>Tue, 06 Aug 2024 12:59:15 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://Tri0mpheL.github.io/rss.xml"/><item><title>Creating a New Theme</title><link>https://Tri0mpheL.github.io/posts/creating-a-new-theme/</link><guid isPermaLink="true">https://Tri0mpheL.github.io/posts/creating-a-new-theme/</guid><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><author>reuixiy@gmail.com (coyote)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I'll explain how Hugo uses templates and how you can organize your templates to create a theme. I won't cover using CSS to style your theme.&lt;/p>
&lt;p>We'll start with creating a new site with a very basic template. Then we'll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.&lt;/p>
&lt;p>In this tutorial, commands that you enter will start with the &amp;quot;$&amp;quot; prompt. The output will follow. Lines that start with &amp;quot;#&amp;quot; are comments that I've added to explain a point. When I show updates to a file, the &amp;quot;:wq&amp;quot; on the last line means to save the file.&lt;/p>
&lt;p>Here's an example:&lt;/p>
&lt;pre tabindex="0">&lt;code>## this is a comment
$ echo this is a command
this is a command
## edit the file
$ vi foo.md
+++
date = &amp;#34;2014-09-28&amp;#34;
title = &amp;#34;creating a new theme&amp;#34;
+++
bah and humbug
:wq
## show it
$ cat foo.md
+++
date = &amp;#34;2014-09-28&amp;#34;
title = &amp;#34;creating a new theme&amp;#34;
+++
bah and humbug
$
&lt;/code>&lt;/pre>&lt;h2 id="some-definitions">Some Definitions&lt;/h2>
&lt;p>There are a few concepts that you need to understand before creating a theme.&lt;/p>
&lt;h3 id="skins">Skins&lt;/h3>
&lt;p>Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.&lt;/p>
&lt;p>You have two ways to create a skin. The simplest way is to create it in the &lt;code>layouts/&lt;/code> directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the &lt;code>layouts/&lt;/code> directory so it will always find the skin.&lt;/p>
&lt;p>Your second choice is to create it in a sub-directory of the &lt;code>themes/&lt;/code> directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?&lt;/p>
&lt;p>The difference between creating a skin in &lt;code>layouts/&lt;/code> and creating it in &lt;code>themes/&lt;/code> is very subtle. A skin in &lt;code>layouts/&lt;/code> can’t be customized without updating the templates and static files that it is built from. A skin created in &lt;code>themes/&lt;/code>, on the other hand, can be and that makes it easier for other people to use it.&lt;/p>
&lt;p>The rest of this tutorial will call a skin created in the &lt;code>themes/&lt;/code> directory a theme.&lt;/p>
&lt;p>Note that you can use this tutorial to create a skin in the &lt;code>layouts/&lt;/code> directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.&lt;/p>
&lt;h3 id="the-home-page">The Home Page&lt;/h3>
&lt;p>The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.&lt;/p>
&lt;h3 id="site-configuration-file">Site Configuration File&lt;/h3>
&lt;p>When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.&lt;/p>
&lt;p>Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your &lt;code>content/&lt;/code> directory and template files in your &lt;code>themes/&lt;/code> directory. It will create HTML files in your &lt;code>public/&lt;/code> directory. You can change this by specifying alternate locations in the configuration file.&lt;/p>
&lt;h3 id="content">Content&lt;/h3>
&lt;p>Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.&lt;/p>
&lt;h4 id="front-matter">Front Matter&lt;/h4>
&lt;p>The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “&lt;code>+++&lt;/code>”, YAML by “&lt;code>---&lt;/code>”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.&lt;/p>
&lt;p>The information in the front matter is passed into the template before the content is rendered into HTML.&lt;/p>
&lt;h4 id="markdown">Markdown&lt;/h4>
&lt;p>Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.&lt;/p>
&lt;h3 id="template-files">Template Files&lt;/h3>
&lt;p>Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it's published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.&lt;/p>
&lt;p>There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.&lt;/p>
&lt;p>Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.&lt;/p>
&lt;p>Please note that you can use the front matter to influence Hugo’s choice of templates.&lt;/p>
&lt;h4 id="single-template">Single Template&lt;/h4>
&lt;p>A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.&lt;/p>
&lt;h4 id="list-template">List Template&lt;/h4>
&lt;p>A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.&lt;/p>
&lt;p>The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.&lt;/p>
&lt;h4 id="partial-template">Partial Template&lt;/h4>
&lt;p>A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.&lt;/p>
&lt;h2 id="create-a-new-site">Create a New Site&lt;/h2>
&lt;p>Let's use Hugo to create a new web site. I'm a Mac user, so I'll create mine in my home directory, in the Sites folder. If you're using Linux, you might have to create the folder first.&lt;/p>
&lt;p>The &amp;quot;new site&amp;quot; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .
drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;p>Take a look in the content/ directory to confirm that it is empty.&lt;/p>
&lt;p>The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That's a topic for a different tutorial, so please ignore them for now.&lt;/p>
&lt;h3 id="generate-the-html-for-the-new-site">Generate the HTML For the New Site&lt;/h3>
&lt;p>Running the &lt;code>hugo&lt;/code> command with no options will read all the available content and generate the HTML files. It will also copy all static files (that's everything that's not content). Since we have an empty site, it won't do much, but it will do it very quickly.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;p>The &amp;quot;&lt;code>--verbose&lt;/code>&amp;quot; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &amp;quot;INFO:&amp;quot; or &amp;quot;WARN:&amp;quot; is present because we used that flag. The lines that start with &amp;quot;WARN:&amp;quot; are warning messages. We'll go over them later.&lt;/p>
&lt;p>We can verify that the command worked by looking at the directory again.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;p>See that new public/ directory? Hugo placed all generated content there. When you're ready to publish your web site, that's the place to start. For now, though, let's just confirm that we have what we'd expect from a site with no content.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l public
total 16
-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml
-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;p>Hugo created two XML files, which is standard, but there are no HTML files.&lt;/p>
&lt;h3 id="test-the-new-site">Test the New Site&lt;/h3>
&lt;p>Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &amp;quot;server&amp;quot; command. If it is successful, you will see output similar to the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
&lt;/code>&lt;/pre>&lt;p>Connect to the listed URL (it's on the line that starts with &amp;quot;Web Server&amp;quot;). If everything is working correctly, you should get a page that shows the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>index.xml
sitemap.xml
&lt;/code>&lt;/pre>&lt;p>That's a listing of your public/ directory. Hugo didn't create a home page because our site has no content. When there's no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.&lt;/p>
&lt;p>Let’s go back and look at those warnings again.&lt;/p>
&lt;pre tabindex="0">&lt;code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
&lt;/code>&lt;/pre>&lt;p>That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.&lt;/p>
&lt;p>Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.&lt;/p>
&lt;p>I like that the verbose flag causes Hugo to list the files that it's searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we'll cover later that explain the names and paths. For now, just remember that Hugo couldn't find a template for the home page and it told you so.&lt;/p>
&lt;p>At this point, you've got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.&lt;/p>
&lt;h2 id="create-a-new-theme">Create a New Theme&lt;/h2>
&lt;p>Hugo doesn't ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.&lt;/p>
&lt;p>We're going to create a new theme called &amp;quot;zafta.&amp;quot; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.&lt;/p>
&lt;p>All themes have opinions on content and layout. For example, Zafta uses &amp;quot;post&amp;quot; over &amp;quot;blog&amp;quot;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.&lt;/p>
&lt;h3 id="create-a-skeleton">Create a Skeleton&lt;/h3>
&lt;p>Use the hugo &amp;quot;new&amp;quot; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo new theme zafta
$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes
$ find themes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml
$
&lt;/code>&lt;/pre>&lt;p>The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.&lt;/p>
&lt;p>Please take a minute to fill out the theme.toml and LICENSE.md files. They're optional, but if you're going to be distributing your theme, it tells the world who to praise (or blame). It's also nice to declare the license so that people will know how they can use the theme.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/theme.toml
author = &amp;#34;michael d henderson&amp;#34;
description = &amp;#34;a minimal working template&amp;#34;
license = &amp;#34;MIT&amp;#34;
name = &amp;#34;zafta&amp;#34;
source_repo = &amp;#34;&amp;#34;
tags = [&amp;#34;tags&amp;#34;, &amp;#34;categories&amp;#34;]
:wq
## also edit themes/zafta/LICENSE.md and change
## the bit that says &amp;#34;YOUR_NAME_HERE&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Note that the the skeleton's template files are empty. Don't worry, we'll be changing that shortly.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
$
&lt;/code>&lt;/pre>&lt;h3 id="update-the-configuration-file-to-use-the-theme">Update the Configuration File to Use the Theme&lt;/h3>
&lt;p>Now that we've got a theme to work with, it's a good idea to add the theme name to the configuration file. This is optional, because you can always add &amp;quot;-t zafta&amp;quot; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don't put it in the configuration file or specify it on the command line, you won't use the template that you're expecting to.&lt;/p>
&lt;p>Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi config.toml
theme = &amp;#34;zafta&amp;#34;
baseurl = &amp;#34;&amp;#34;
languageCode = &amp;#34;en-us&amp;#34;
title = &amp;#34;zafta - totally refreshing&amp;#34;
MetaDataFormat = &amp;#34;toml&amp;#34;
:wq
$
&lt;/code>&lt;/pre>&lt;h3 id="generate-the-site">Generate the Site&lt;/h3>
&lt;p>Now that we have an empty theme, let's generate the site again.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;p>Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme's directory.&lt;/p>
&lt;p>Let's check the public/ directory to see what Hugo's created.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l public
total 16
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css
-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html
-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js
-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;p>Notice four things:&lt;/p>
&lt;ol>
&lt;li>Hugo created a home page. This is the file public/index.html.&lt;/li>
&lt;li>Hugo created a css/ directory.&lt;/li>
&lt;li>Hugo created a js/ directory.&lt;/li>
&lt;li>Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn't create any pages. That's because it considers a &amp;quot;page&amp;quot; to be a file created directly from a content file. It doesn't count things like the index.html files that it creates automatically.&lt;/li>
&lt;/ol>
&lt;h4 id="the-home-page-1">The Home Page&lt;/h4>
&lt;p>Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo's warning message shows that it looks for three different templates:&lt;/p>
&lt;pre tabindex="0">&lt;code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
&lt;/code>&lt;/pre>&lt;p>If it can't find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.&lt;/p>
&lt;p>When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find . -name index.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$
&lt;/code>&lt;/pre>&lt;h4 id="the-magic-of-static">The Magic of Static&lt;/h4>
&lt;p>Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.&lt;/p>
&lt;p>Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo's opinion is that you'll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don't like that, you can change the directory names in your theme directory or even delete them completely. Hugo's nice enough to offer its opinion, then behave nicely if you disagree.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js
$
&lt;/code>&lt;/pre>&lt;h2 id="the-theme-development-cycle">The Theme Development Cycle&lt;/h2>
&lt;p>When you're working on a theme, you will make changes in the theme's directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:&lt;/p>
&lt;ol>
&lt;li>Purge the public/ directory.&lt;/li>
&lt;li>Run the built in web server in watch mode.&lt;/li>
&lt;li>Open your site in a browser.&lt;/li>
&lt;li>Update the theme.&lt;/li>
&lt;li>Glance at your browser window to see changes.&lt;/li>
&lt;li>Return to step 4.&lt;/li>
&lt;/ol>
&lt;p>I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.&lt;/p>
&lt;p>Check the main Hugo site for information on using Git with Hugo.&lt;/p>
&lt;h3 id="purge-the-public-directory">Purge the public/ Directory&lt;/h3>
&lt;p>When generating the site, Hugo will create new files and update existing ones in the &lt;code>public/&lt;/code> directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.&lt;/p>
&lt;p>Note: If you're building on an SSD, you should ignore this. Churning on a SSD can be costly.&lt;/p>
&lt;h3 id="hugos-watch-option">Hugo's Watch Option&lt;/h3>
&lt;p>Hugo's &amp;quot;&lt;code>--watch&lt;/code>&amp;quot; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.&lt;/p>
&lt;h3 id="live-reload">Live Reload&lt;/h3>
&lt;p>Hugo's built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &amp;quot;Wow, that's totally amazing.&amp;quot;&lt;/p>
&lt;h3 id="development-commands">Development Commands&lt;/h3>
&lt;p>Use the following commands as the basis for your workflow.&lt;/p>
&lt;pre tabindex="0">&lt;code>## purge old files. hugo will recreate the public directory.
##
$ rm -rf public
##
## run hugo in watch mode
##
$ hugo server --watch --verbose
&lt;/code>&lt;/pre>&lt;p>Here's sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I've said this before, it's amazing.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&amp;#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&amp;#34;: MODIFY|ATTRIB]
Change detected, rebuilding site
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 1 ms
&lt;/code>&lt;/pre>&lt;h2 id="update-the-home-page-template">Update the Home Page Template&lt;/h2>
&lt;p>The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme's layout/ directory:&lt;/p>
&lt;ol>
&lt;li>index.html&lt;/li>
&lt;li>_default/list.html&lt;/li>
&lt;li>_default/single.html&lt;/li>
&lt;/ol>
&lt;p>We could update one of the default templates, but a good design decision is to update the most specific template available. That's not a hard and fast rule (in fact, we'll break it a few times in this tutorial), but it is a good generalization.&lt;/p>
&lt;h3 id="make-a-static-home-page">Make a Static Home Page&lt;/h3>
&lt;p>Right now, that page is empty because we don't have any content and we don't have any logic in the template. Let's change that by adding some text to the template.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="live-reload-1">Live Reload&lt;/h4>
&lt;p>Note: If you're running the server with the &lt;code>--watch&lt;/code> option, you'll see different content in the file:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;script src=&amp;#34;http://&amp;#39;
+ (location.host || &amp;#39;localhost&amp;#39;).split(&amp;#39;:&amp;#39;)[0]
+ &amp;#39;:1313/livereload.js?mindelay=10&amp;#34;&amp;gt;&amp;lt;/&amp;#39;
+ &amp;#39;script&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>When you use &lt;code>--watch&lt;/code>, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.&lt;/p>
&lt;h3 id="build-a-dynamic-home-page">Build a &amp;quot;Dynamic&amp;quot; Home Page&lt;/h3>
&lt;p>&amp;quot;Dynamic home page?&amp;quot; Hugo's a static web site generator, so this seems an odd thing to say. I mean let's have the home page automatically reflect the content in the site every time Hugo builds it. We'll use iteration in the template to do that.&lt;/p>
&lt;h4 id="create-new-posts">Create New Posts&lt;/h4>
&lt;p>Now that we have the home page generating static content, let's add some content to the site. We'll display these posts as a list on the home page and on their own page, too.&lt;/p>
&lt;p>Hugo has a command to generate a skeleton post, just like it does for sites and themes.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &amp;lt;nil&amp;gt; to map[string]interface{}
$
&lt;/code>&lt;/pre>&lt;p>That wasn't very nice, was it?&lt;/p>
&lt;p>The &amp;quot;new&amp;quot; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there's a theme. For me, the workaround was to create an archetypes file specifically for the post type.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/archetypes/post.md
+++
Description = &amp;#34;&amp;#34;
Tags = []
Categories = []
+++
:wq
$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md
$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created
$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created
$ ls -l content/post
total 16
-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md
-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md
$ cat content/post/first.md
+++
Categories = []
Description = &amp;#34;&amp;#34;
Tags = []
date = &amp;#34;2014-09-29T21:54:53-05:00&amp;#34;
title = &amp;#34;first&amp;#34;
+++
my first post
$ cat content/post/second.md
+++
Categories = []
Description = &amp;#34;&amp;#34;
Tags = []
date = &amp;#34;2014-09-29T21:57:09-05:00&amp;#34;
title = &amp;#34;second&amp;#34;
+++
my second post
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;, &amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$
&lt;/code>&lt;/pre>&lt;p>The output says that it created 2 pages. Those are our new posts:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html
$
&lt;/code>&lt;/pre>&lt;p>The new files are empty because because the templates used to generate the content are empty. The homepage doesn't show the new content, either. We have to update the templates to add the posts.&lt;/p>
&lt;h3 id="list-and-single-templates">List and Single Templates&lt;/h3>
&lt;p>In Hugo, we have three major kinds of templates. There's the home page template that we updated previously. It is used only by the home page. We also have &amp;quot;single&amp;quot; templates which are used to generate output for a single content file. We also have &amp;quot;list&amp;quot; templates that are used to group multiple pieces of content before generating output.&lt;/p>
&lt;p>Generally speaking, list templates are named &amp;quot;list.html&amp;quot; and single templates are named &amp;quot;single.html.&amp;quot;&lt;/p>
&lt;p>There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.&lt;/p>
&lt;h3 id="add-content-to-the-homepage">Add Content to the Homepage&lt;/h3>
&lt;p>The home page will contain a list of posts. Let's update its template to add the posts that we just created. The logic in the template will run every time we build the site.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &amp;quot;{{&amp;quot; and &amp;quot;}}&amp;quot;. In our template, the commands are:&lt;/p>
&lt;ol>
&lt;li>range&lt;/li>
&lt;li>.Title&lt;/li>
&lt;li>end&lt;/li>
&lt;/ol>
&lt;p>The &amp;quot;range&amp;quot; command is an iterator. We're going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.&lt;/p>
&lt;p>The &amp;quot;.Title&amp;quot; command prints the value of the &amp;quot;title&amp;quot; variable. Hugo pulls it from the front matter in the Markdown file.&lt;/p>
&lt;p>The &amp;quot;end&amp;quot; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &amp;quot;end.&amp;quot; Everything between the &amp;quot;range&amp;quot; and &amp;quot;end&amp;quot; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.&lt;/p>
&lt;p>It's helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.&lt;/p>
&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;, &amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;p>Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let's take a moment to appreciate what we've done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you've learned everything you need to know to build a theme. All that's really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.&lt;/p>
&lt;p>And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don't worry, though, that's all to come.&lt;/p>
&lt;h3 id="add-content-to-the-posts">Add Content to the Posts&lt;/h3>
&lt;p>We're working with posts, which are in the content/post/ directory. That means that their section is &amp;quot;post&amp;quot; (and if we don't do something weird, their type is also &amp;quot;post&amp;quot;).&lt;/p>
&lt;p>Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can't find one, then it will look in the _default/ directory. There are some twists that we'll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.&lt;/p>
&lt;p>Now that we know the search rule, let's see what we actually have available:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html
&lt;/code>&lt;/pre>&lt;p>We could create a new template, post/single.html, or change the default. Since we don't know of any other content types, let's start with updating the default.&lt;/p>
&lt;p>Remember, any content that we haven't created a template for will end up using this template. That can be good or bad. Bad because I know that we're going to be adding different types of content and we're going to end up undoing some of the changes we've made. It's good because we'll be able to see immediate results. It's also good to start here because we can start to build the basic layout for the site. As we add more content types, we'll refactor this file and move logic around. Hugo makes that fairly painless, so we'll accept the cost and proceed.&lt;/p>
&lt;p>Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you're building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That's a refreshing amount of joy right there.&lt;/p>
&lt;h4 id="update-the-template-file">Update the Template File&lt;/h4>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;, &amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html
$ cat public/post/first/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;first&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;my first post&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$ cat public/post/second/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;second&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;my second post&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;p>Notice that the posts now have content. You can go to localhost:1313/post/first to verify.&lt;/p>
&lt;h3 id="linking-to-content">Linking to Content&lt;/h3>
&lt;p>The posts are on the home page. Let's add a link from there to the post. Since this is the home page, we'll update its template.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Build the web site and verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;, &amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;/post/second/&amp;#34;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;/post/first/&amp;#34;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;h3 id="create-a-post-listing">Create a Post Listing&lt;/h3>
&lt;p>We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let's make it show a list of all posts (not just the first ten).&lt;/p>
&lt;p>We need to decide which template to update. This will be a listing, so it should be a list template. Let's take a quick look and see which list templates are available.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
&lt;/code>&lt;/pre>&lt;p>As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don't have multiple content types, so let's stay consistent and update the default list template.&lt;/p>
&lt;h2 id="creating-top-level-pages">Creating Top Level Pages&lt;/h2>
&lt;p>Let's add an &amp;quot;about&amp;quot; page and display it at the top level (as opposed to a sub-level like we did with posts).&lt;/p>
&lt;p>The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let's verify that by creating an &amp;quot;about&amp;quot; page at the top level:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi content/about.md
+++
title = &amp;#34;about&amp;#34;
description = &amp;#34;about this site&amp;#34;
date = &amp;#34;2014-09-27&amp;#34;
slug = &amp;#34;about time&amp;#34;
+++
## about us
i&amp;#39;m speechless
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html
&lt;/code>&lt;/pre>&lt;p>Notice that the page wasn't created at the top level. It was created in a sub-directory named 'about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It's a reasonable default, by the way, but we can learn a few things by fighting it for this file.&lt;/p>
&lt;p>One other thing. Take a look at the home page.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/theme/&amp;#34;&amp;gt;creating a new theme&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/about-time/&amp;#34;&amp;gt;about&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/second-post/&amp;#34;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/first-post/&amp;#34;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;script src=&amp;#34;http://&amp;#39;
+ (location.host || &amp;#39;localhost&amp;#39;).split(&amp;#39;:&amp;#39;)[0]
+ &amp;#39;:1313/livereload.js?mindelay=10&amp;#34;&amp;gt;&amp;lt;/&amp;#39;
+ &amp;#39;script&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Notice that the &amp;quot;about&amp;quot; link is listed with the posts? That's not desirable, so let's change that first.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;#34;post&amp;#34;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if eq .Type &amp;#34;page&amp;#34; }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.&lt;/p>
&lt;p>But, that about page still renders to about-time/index.html.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html
&lt;/code>&lt;/pre>&lt;p>Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let's do it the hard way and change the permalink in the configuration file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi config.toml
[permalinks]
page = &amp;#34;/:title/&amp;#34;
about = &amp;#34;/:filename/&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify that this didn't work. Hugo lets &amp;quot;slug&amp;quot; or &amp;quot;URL&amp;quot; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.&lt;/p>
&lt;h2 id="sharing-templates">Sharing Templates&lt;/h2>
&lt;p>If you've been following along, you probably noticed that posts have titles in the browser and the home page doesn't. That's because we didn't put the title in the home page's template (layouts/index.html). That's an easy thing to do, but let's look at a different option.&lt;/p>
&lt;p>We can put the common bits into a shared template that's stored in the themes/zafta/layouts/partials/ directory.&lt;/p>
&lt;h3 id="create-the-header-and-footer-partials">Create the Header and Footer Partials&lt;/h3>
&lt;p>In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme's presentation.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/partials/header.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
:wq
$ vi themes/zafta/layouts/partials/footer.html
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;h3 id="update-the-home-page-template-to-use-the-partials">Update the Home Page Template to Use the Partials&lt;/h3>
&lt;p>The most noticeable difference between a template call and a partials call is the lack of path:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ template &amp;#34;theme/partials/header.html&amp;#34; . }}
&lt;/code>&lt;/pre>&lt;p>versus&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ partial &amp;#34;header.html&amp;#34; . }}
&lt;/code>&lt;/pre>&lt;p>Both pass in the context.&lt;/p>
&lt;p>Let's change the home page template to use these new partials.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;#34;post&amp;#34;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if or (eq .Type &amp;#34;page&amp;#34;) (eq .Type &amp;#34;about&amp;#34;) }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The title on the home page is now &amp;quot;your title here&amp;quot;, which comes from the &amp;quot;title&amp;quot; variable in the config.toml file.&lt;/p>
&lt;h3 id="update-the-default-single-template-to-use-the-partials">Update the Default Single Template to Use the Partials&lt;/h3>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.&lt;/p>
&lt;h2 id="add-date-published-to-posts">Add “Date Published” to Posts&lt;/h2>
&lt;p>It's common to have posts display the date that they were written or published, so let's add that. The front matter of our posts has a variable named &amp;quot;date.&amp;quot; It's usually the date the content was created, but let's pretend that's the value we want to display.&lt;/p>
&lt;h3 id="add-date-published-to-the-template">Add “Date Published” to the Template&lt;/h3>
&lt;p>We'll start by updating the template used to render the posts. The template code will look like:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}
&lt;/code>&lt;/pre>&lt;p>Posts use the default single template, so we'll change that file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The posts now have the date displayed in them. There's a problem, though. The &amp;quot;about&amp;quot; page also has the date displayed.&lt;/p>
&lt;p>As usual, there are a couple of ways to make the date display only on posts. We could do an &amp;quot;if&amp;quot; statement like we did on the home page. Another way would be to create a separate template for posts.&lt;/p>
&lt;p>The &amp;quot;if&amp;quot; solution works for sites that have just a couple of content types. It aligns with the principle of &amp;quot;code for today,&amp;quot; too.&lt;/p>
&lt;p>Let's assume, though, that we've made our site so complex that we feel we have to create a new template type. In Hugo-speak, we're going to create a section template.&lt;/p>
&lt;p>Let's restore the default single template before we forget.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Now we'll update the post's version of the single template. If you remember Hugo's rules, the template engine will use this version over the default.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/post/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn't.&lt;/p>
&lt;h3 id="dont-repeat-yourself">Don't Repeat Yourself&lt;/h3>
&lt;p>DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you're figuring that out, accept that you'll be doing some refactoring. Hugo makes that easy and fast, so it's okay to delay splitting up a template.&lt;/p></description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://Tri0mpheL.github.io/posts/migrate-from-jekyll/</link><guid isPermaLink="true">https://Tri0mpheL.github.io/posts/migrate-from-jekyll/</guid><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><author>reuixiy@gmail.com (coyote)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="move-static-content-to-static">Move static content to &lt;code>static&lt;/code>&lt;/h2>
&lt;p>Jekyll has a rule that any directory not starting with &lt;code>_&lt;/code> will be copied as-is to the &lt;code>_site&lt;/code> output. Hugo keeps all static content under &lt;code>static&lt;/code>. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p>
&lt;pre>&lt;code>▾ &amp;lt;root&amp;gt;/
▾ images/
logo.png
&lt;/code>&lt;/pre>
&lt;p>should become&lt;/p>
&lt;pre>&lt;code>▾ &amp;lt;root&amp;gt;/
▾ static/
▾ images/
logo.png
&lt;/code>&lt;/pre>
&lt;p>Additionally, you'll want any files that should reside at the root (such as &lt;code>CNAME&lt;/code>) to be moved to &lt;code>static&lt;/code>.&lt;/p>
&lt;h2 id="create-your-hugo-configuration-file">Create your Hugo configuration file&lt;/h2>
&lt;p>Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href="https://Tri0mpheL.github.io/overview/configuration/">Hugo configuration documentation&lt;/a> for details.&lt;/p>
&lt;h2 id="set-your-configuration-publish-folder-to-_site">Set your configuration publish folder to &lt;code>_site&lt;/code>&lt;/h2>
&lt;p>The default is for Jekyll to publish to &lt;code>_site&lt;/code> and for Hugo to publish to &lt;code>public&lt;/code>. If, like me, you have &lt;a href="http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html">&lt;code>_site&lt;/code> mapped to a git submodule on the &lt;code>gh-pages&lt;/code> branch&lt;/a>, you'll want to do one of two alternatives:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Change your submodule to point to map &lt;code>gh-pages&lt;/code> to public instead of &lt;code>_site&lt;/code> (recommended).&lt;/p>
&lt;pre>&lt;code> git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Or, change the Hugo configuration to use &lt;code>_site&lt;/code> instead of &lt;code>public&lt;/code>.&lt;/p>
&lt;pre>&lt;code> {
..
&amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
..
}
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;h2 id="convert-jekyll-templates-to-hugo-templates">Convert Jekyll templates to Hugo templates&lt;/h2>
&lt;p>That's the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href="http://jekyllrb.com/docs/templates/">Jekyll's template documentation&lt;/a> if you need to refresh your memory on how you built your blog and &lt;a href="https://Tri0mpheL.github.io/layout/templates/">Hugo's template&lt;/a> to learn Hugo's way.&lt;/p>
&lt;p>As a single reference data point, converting my templates for &lt;a href="http://heyitsalex.net/">heyitsalex.net&lt;/a> took me no more than a few hours.&lt;/p>
&lt;h2 id="convert-jekyll-plugins-to-hugo-shortcodes">Convert Jekyll plugins to Hugo shortcodes&lt;/h2>
&lt;p>Jekyll has &lt;a href="http://jekyllrb.com/docs/plugins/">plugins&lt;/a>; Hugo has &lt;a href="https://Tri0mpheL.github.io/doc/shortcodes/">shortcodes&lt;/a>. It's fairly trivial to do a port.&lt;/p>
&lt;h3 id="implementation">Implementation&lt;/h3>
&lt;p>As an example, I was using a custom &lt;a href="https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb">&lt;code>image_tag&lt;/code>&lt;/a> plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p>
&lt;p>Jekyll's plugin:&lt;/p>
&lt;pre>&lt;code>module Jekyll
class ImageTag &amp;lt; Liquid::Tag
@url = nil
@caption = nil
@class = nil
@link = nil
// Patterns
IMAGE_URL_WITH_CLASS_AND_CAPTION =
IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
def initialize(tag_name, markup, tokens)
super
if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
@class = $1
@url = $3
@caption = $7
@link = $9
elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
@class = $1
@url = $3
@caption = $7
elsif markup =~ IMAGE_URL_WITH_CAPTION
@url = $1
@caption = $5
elsif markup =~ IMAGE_URL_WITH_CLASS
@class = $1
@url = $3
elsif markup =~ IMAGE_URL
@url = $1
end
end
def render(context)
if @class
source = &amp;quot;&amp;lt;figure class='#{@class}'&amp;gt;&amp;quot;
else
source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
end
if @link
source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
end
source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
if @link
source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
end
source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
source
end
end
end
Liquid::Template.register_tag('image', Jekyll::ImageTag)
&lt;/code>&lt;/pre>
&lt;p>is written as this Hugo shortcode:&lt;/p>
&lt;pre>&lt;code>&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
{{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
&amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
{{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
{{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
&amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
{{ .Get &amp;quot;title&amp;quot; }}{{ end }}
{{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
{{ .Get &amp;quot;caption&amp;quot; }}
{{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
{{ .Get &amp;quot;attr&amp;quot; }}
{{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
&amp;lt;/p&amp;gt; {{ end }}
&amp;lt;/figcaption&amp;gt;
{{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code>&lt;/pre>
&lt;h3 id="usage">Usage&lt;/h3>
&lt;p>I simply changed:&lt;/p>
&lt;pre>&lt;code>{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code>&lt;/pre>
&lt;p>to this (this example uses a slightly extended version named &lt;code>fig&lt;/code>, different than the built-in &lt;code>figure&lt;/code>):&lt;/p>
&lt;pre>&lt;code>{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code>&lt;/pre>
&lt;p>As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p>
&lt;h2 id="finishing-touches">Finishing touches&lt;/h2>
&lt;h3 id="fix-content">Fix content&lt;/h3>
&lt;p>Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code>hugo server --watch&lt;/code> is your friend. Test your changes and fix errors as needed.&lt;/p>
&lt;h3 id="clean-up">Clean up&lt;/h3>
&lt;p>You'll want to remove the Jekyll configuration at this point. If you have anything else that isn't used, delete it.&lt;/p>
&lt;h2 id="a-practical-example-in-a-diff">A practical example in a diff&lt;/h2>
&lt;p>&lt;a href="http://heyitsalex.net/">Hey, it's Alex&lt;/a> was migrated in less than a &lt;em>father-with-kids day&lt;/em> from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a href="https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610">diff&lt;/a>.&lt;/p></description></item><item><title>Création d'un nouveau thème</title><link>https://Tri0mpheL.github.io/posts/creation-dun-nouveau-theme/</link><guid isPermaLink="true">https://Tri0mpheL.github.io/posts/creation-dun-nouveau-theme/</guid><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><author>reuixiy@gmail.com (coyote)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Ce tutoriel vous montrera comment créer un thème simple pour Hugo. Je suppose que vous êtes familier avec HTML, la ligne de commande bash, et que vous êtes à l'aise avec Markdown pour formater le contenu. Je vais expliquer comment Hugo utilise des modèles et comment vous pouvez organiser vos modèles pour créer un thème. Je ne couvrirai pas l'utilisation de CSS pour styliser votre thème.&lt;/p>
&lt;p>Nous allons commencer par créer un nouveau site avec un modèle très basique. Ensuite, nous ajouterons quelques pages et des publications. Avec de petites variations, vous pourrez créer de nombreux types de sites web.&lt;/p>
&lt;p>Dans ce tutoriel, les commandes que vous entrez commenceront par l'invite &amp;quot;$&amp;quot;. La sortie suivra. Les lignes qui commencent par &amp;quot;#&amp;quot; sont des commentaires que j'ai ajoutés pour expliquer un point. Lorsque je montre les mises à jour d'un fichier, le &amp;quot;:wq&amp;quot; sur la dernière ligne signifie qu'il faut sauvegarder le fichier.&lt;/p>
&lt;p>Voici un exemple :&lt;/p>
&lt;pre tabindex="0">&lt;code>## Ceci est un commentaire
$ echo ceci est une commande
ceci est une commande
## édition d&amp;#39;un fichier
$vi foo.md
+++
date = &amp;#34;2014-09-28&amp;#34;
title = &amp;#34;Création d&amp;#39;un nouveau thème&amp;#34;
+++
Contenu du fichier
:wq
## L&amp;#39;afficher
$ cat foo.md
+++
date = &amp;#34;2014-09-28&amp;#34;
title = &amp;#34;Création d&amp;#39;un nouveau thème&amp;#34;
+++
Contenu du fichier
$
&lt;/code>&lt;/pre>&lt;h2 id="quelques-définitions">Quelques définitions&lt;/h2>
&lt;p>Il y a quelques concepts que vous devez comprendre avant de créer un thème.&lt;/p>
&lt;h3 id="skins">Skins&lt;/h3>
&lt;p>Les skins sont les fichiers responsables de l'apparence de votre site. C'est le CSS qui contrôle les couleurs et les polices, c'est le Javascript qui détermine les actions et les réactions. Ce sont aussi les règles que Hugo utilise pour transformer votre contenu en HTML que le site montrera aux visiteurs.&lt;/p>
&lt;p>Vous avez deux façons de créer un skin. Le moyen le plus simple est de le créer dans le répertoire &lt;code>layouts/&lt;/code>. Si vous le faites, vous n'avez pas à vous soucier de configurer Hugo pour le reconnaître. Le premier endroit où Hugo recherchera pour les règles et les fichiers se trouve dans le répertoire &lt;code>layouts/&lt;/code> afin de trouver toujours le skin.&lt;/p>
&lt;p>Votre deuxième choix est de le créer dans un sous-répertoire du répertoire &lt;code>themes/&lt;/code>. Si vous le faites, vous devez toujours indiquer à Hugo où chercher le skin. C'est un travail supplémentaire, cependant, alors, pourquoi s'embêter avec ça?&lt;/p>
&lt;p>La différence entre la création d'un skin dans &lt;code>layouts/&lt;/code> et la création dans &lt;code>themes/&lt;/code> est très subtile. Un skin dans &lt;code>layouts/&lt;/code> ne peut pas être personnalisé sans mettre à jour les modèles et les fichiers statiques sur lesquels il est construit. Un skin créé dans &lt;code>themes/&lt;/code>, d'autre part, peut être et facilite son utilisation par d'autres personnes.&lt;/p>
&lt;p>Le reste de ce tutoriel appellera un skin créé dans le répertoire &lt;code>thèmes/&lt;/code>, un thème.&lt;/p>
&lt;p>Notez que vous pouvez utiliser ce tutoriel pour créer un skin dans le répertoire &lt;code>layouts/&lt;/code> si vous le souhaitez. La principale différence sera que vous n'aurez pas besoin de mettre à jour le fichier de configuration du site pour utiliser un thème.&lt;/p>
&lt;h3 id="la-page-daccueil">La page d'accueil&lt;/h3>
&lt;p>La page d'accueil, ou la page de destination, est la première page que beaucoup de visiteurs d'un site voient. C'est le fichier index.html dans le répertoire racine du site Web. Puisque Hugo écrit des fichiers dans le répertoire public/, notre page d'accueil est public/index.html.&lt;/p>
&lt;h3 id="fichier-de-configuration-du-site">Fichier de configuration du site&lt;/h3>
&lt;p>Lorsque Hugo s'exécute, il recherche un fichier de configuration qui contient des paramètres qui remplacent les valeurs par défaut pour l'ensemble du site. Le fichier peut utiliser TOML, YAML ou JSON. Je préfère utiliser TOML pour mes fichiers de configuration. Si vous préférez utiliser JSON ou YAML, vous devrez traduire mes exemples. Vous devrez également modifier le nom du fichier puisque Hugo utilise l'extension pour déterminer comment le traiter.&lt;/p>
&lt;p>Hugo traduit les fichiers Markdown en HTML. Par défaut, Hugo s'attend à trouver des fichiers Markdown dans votre répertoire &lt;code>content/&lt;/code> and les modèles dans le répertoire &lt;code>themes/&lt;/code>. Il créera les fichiers HTML dans votre répertoire &lt;code>public/&lt;/code>. Vous pouvez le modifier en spécifiant d'autres emplacements dans le fichier de configuration.&lt;/p>
&lt;h3 id="le-contenu">Le contenu&lt;/h3>
&lt;p>Le contenu est stocké dans des fichiers texte contenant deux sections. La première section est la &amp;quot;section liminaire&amp;quot;, qui contient les méta-informations sur le contenu. La deuxième section contient le Markdown qui sera converti en HTML.&lt;/p>
&lt;h4 id="section-liminaire">Section liminaire&lt;/h4>
&lt;p>La section liminaire est une information sur le contenu. Comme le fichier de configuration, il peut être écrit en TOML, YAML ou JSON. Contrairement au fichier de configuration, Hugo n'utilise pas l'extension du fichier pour connaître le format. Il recherche des marqueurs pour signaler le type. TOML est entouré de &amp;quot;&lt;code>+++&lt;/code>&amp;quot;, YAML par &amp;quot;&lt;code>---&lt;/code>&amp;quot;, et JSON est enfermé dans des accolades. Je préfère utiliser TOML, donc vous devrez traduire mes exemples si vous préférez YAML ou JSON.&lt;/p>
&lt;p>L'information dans la section liminaire est transmise au modèle avant que le contenu ne soit rendu en HTML.&lt;/p>
&lt;h4 id="markdown">Markdown&lt;/h4>
&lt;p>Le contenu est écrit dans Markdown qui facilite la création du contenu. Hugo exécute le contenu via un moteur Markdown pour créer le code HTML qui sera écrit dans le fichier de sortie.&lt;/p>
&lt;h3 id="modèles">Modèles&lt;/h3>
&lt;p>Hugo utilise des modèles pour rendre le contenu en HTML. Les modèles sont un pont entre le contenu et la présentation. Les règles du modèle définissent quel contenu est publié, où il est publié et comment il sera rendu au fichier HTML. Le modèle guide la présentation en spécifiant le style à utiliser.&lt;/p>
&lt;p>Il existe trois types de modèles: simple, liste et partiel. Chaque type prend un peu de contenu comme entrée et le transforme en fonction des commandes du modèle.&lt;/p>
&lt;p>Hugo utilise sa connaissance du contenu pour trouver le modèle a utiliser pour rendre le contenu. S'il ne peut pas trouver un modèle qui correspond exactement au contenu, il changera de niveau et recherchera à partir de là. Il continuera à le faire jusqu'à ce qu'il trouve un modèle correspondant ou ne dispose plus de modèles à essayer. S'il ne peut pas trouver un modèle, il utilisera le modèle par défaut pour le site.&lt;/p>
&lt;p>Veuillez noter que vous pouvez utiliser la section liminaire pour influencer le choix de modèles de Hugo.&lt;/p>
&lt;h4 id="modèle-simple">Modèle simple&lt;/h4>
&lt;p>Un modèle simple est utilisé pour rendre un seul contenu. Par exemple, un article ou une publication serait un seul élément de contenu et utiliserait un modèle simple.&lt;/p>
&lt;h4 id="modèle-de-liste">Modèle de liste&lt;/h4>
&lt;p>Un modèle de liste rend un groupe de contenu connexe. Cela pourrait être un résumé des publications récentes ou de tous les articles d'une catégorie. Les modèles de liste peuvent contenir plusieurs groupes.&lt;/p>
&lt;p>Le modèle de la page d'accueil est un type spécial de modèle de liste. Hugo suppose que la page d'accueil de votre site servira de portail pour le reste du contenu sur le site.&lt;/p>
&lt;h4 id="modèle-partiel">Modèle partiel&lt;/h4>
&lt;p>Un modèle partiel est un modèle qui peut être inclus dans d'autres modèles. Les modèles partiels doivent être appelés en utilisant la commande de modèle &amp;quot;partial&amp;quot;. Ils sont très utiles pour utiliser des comportement commun. Par exemple, votre site peut avoir une bannière que toutes les pages utilisent. Au lieu de copier le texte de la bannière dans chaque modèle simple et de liste, vous pouvez créer une partie avec la bannière. De cette façon, si vous décidez de modifier la bannière, il vous suffit de changer le modèle partiel.&lt;/p>
&lt;h2 id="créer-un-nouveau-site">Créer un nouveau site&lt;/h2>
&lt;p>Utilisons Hugo pour créer un nouveau site Web. Je suis un utilisateur Mac, alors je vais créer le mien dans mon répertoire personnel, dans le dossier Sites. Si vous utilisez Linux, vous devrez d'abord créer le dossier.&lt;/p>
&lt;p>La commande &amp;quot;new site&amp;quot; créera un squelette d'un site. Il vous donnera la structure de répertoire de base et un fichier de configuration utilisable.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .
drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;p>Consultez le répertoire content/ pour confirmer qu'il est vide.&lt;/p>
&lt;p>Les autres répertoires (archetypes/, layouts/ et static/) sont utilisés lors de la personnalisation d'un thème. C'est un sujet pour un tutoriel différent, alors ignorez-les pour l'instant.&lt;/p>
&lt;h3 id="générer-le-html-pour-le-nouveau-site">Générer le HTML pour le nouveau site&lt;/h3>
&lt;p>Éxécuter la commande &lt;code>hugo&lt;/code> sans options permet de lire tout le contenu disponible et de générer les fichiers HTML. Il copiera également tous les fichiers statiques (tout ce qui n'est pas du contenu). Comme nous avons un site vide, il ne fera pas grand chose, mais il le fera très rapidement.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
/Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html
_default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;p>Le drapeau &amp;quot;&lt;code>--verbose&lt;/code> &amp;quot;donne des informations supplémentaires qui seront utiles lorsque nous créerons le modèle. Chaque ligne de sortie qui commence par &amp;quot;INFO:&amp;quot; ou &amp;quot;WARN:&amp;quot; est présente car nous avons utilisé ce drapeau. Les lignes qui commencent par &amp;quot;WARN:&amp;quot; sont des messages d'avertissement. Nous les examinerons plus tard.&lt;/p>
&lt;p>Nous pouvons vérifier que la commande a fonctionné en regardant de nouveau le répertoire.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;p>Voyez-vous ce nouveau répertoire public/ ? Hugo y a placé tout le contenu généré. Lorsque vous êtes prêt à publier votre site Web, c'est l'endroit idéal pour commencer. Pour l'instant, nous allons simplement confirmer que nous avons ce que nous attendons pour un site sans contenu.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l public
total 16
-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml
-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;p>Hugo a créé deux fichiers XML, ce qui est standard, mais il n'y a pas de fichiers HTML.&lt;/p>
&lt;h3 id="tester-le-nouveau-site">Tester le nouveau site&lt;/h3>
&lt;p>Vérifiez que vous pouvez exécuter le serveur Web intégré. Cela réduira considérablement votre cycle de développement si vous le faites. Commencez en exécutant la commande &amp;quot;server&amp;quot;. Si vous réussissez, vous verrez une sortie similaire à la suivante:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
/Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html
_default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
&lt;/code>&lt;/pre>&lt;p>Connectez-vous à l'URL répertorié (c'est sur la ligne qui commence par &amp;quot;Web Server&amp;quot;). Si tout fonctionne correctement, vous devriez obtenir une page qui montre ce qui suit:&lt;/p>
&lt;pre tabindex="0">&lt;code>index.xml
sitemap.xml
&lt;/code>&lt;/pre>&lt;p>C'est une liste de votre répertoire public/. Hugo n'a pas créé une page d'accueil car notre site n'a aucun contenu. Quand il n'y a pas de fichier index.html dans un répertoire, le serveur répertorie les fichiers dans le répertoire, ce que vous devriez voir dans votre navigateur.&lt;/p>
&lt;p>Revenons encore à ces avertissements.&lt;/p>
&lt;pre tabindex="0">&lt;code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html
_default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
&lt;/code>&lt;/pre>&lt;p>Ce deuxième avertissement est plus facile à expliquer. Nous n'avons pas créé un modèle à utiliser pour générer des &amp;quot;erreurs de page non trouvées&amp;quot;. Le message 404 est un sujet pour un tutoriel distinct.&lt;/p>
&lt;p>À propos du premier avertissement. C'est pour la page d'accueil. Vous pouvez le dire parce que la première mise en page qu'il recherchait était &amp;quot;index.html&amp;quot;. Cela n'est utilisé que par la page d'accueil.&lt;/p>
&lt;p>J'aime que le drapeau verbose demande à Hugo de lister les fichiers qu'il recherche. Pour la page d'accueil, ce sont index.html, _default/list.html et _default/single.html. Il y a des règles que nous aborderons plus loin qui expliquent les noms et les chemins. Pour l'instant, n'oubliez pas que Hugo n'a pas pu trouver un modèle pour la page d'accueil et il vous l'a dit.&lt;/p>
&lt;p>À ce stade, vous avez une installation de travail et un site sur lequel nous pouvons développer. Tout ce qui reste, c'est d'ajouter du contenu et un thème pour l'afficher.&lt;/p>
&lt;h2 id="créer-un-nouveau-thème">Créer un nouveau thème&lt;/h2>
&lt;p>Hugo ne fournit pas de thème par défaut. Il y a quelques-uns disponibles (j'ai compté une douzaine lorsque j'ai installé Hugo pour la première fois) et Hugo contient une commande pour créer de nouveaux thèmes.&lt;/p>
&lt;p>Nous allons créer un nouveau thème appelé &amp;quot;zafta&amp;quot;. Étant donné que le but de ce didacticiel est de vous montrer comment remplir les fichiers pour extraire votre contenu, le thème ne contiendra aucun CSS. En d'autres termes, moche mais fonctionnel.&lt;/p>
&lt;p>Tous les thèmes utilisent des philosophies différentes sur le contenu et la mise en page. Les philosophies fortes permettent de créer un thème facilement, mais différentes philosophies rendrons l'utilisation du thème plus difficile. Par exemple, Zafta utilise &amp;quot;post&amp;quot; au lieu de &amp;quot;blog&amp;quot;. Lorsque vous construisez un thème, envisagez d'utiliser les termes que d'autres thèmes utilisent.&lt;/p>
&lt;h3 id="créer-un-squelette">Créer un squelette&lt;/h3>
&lt;p>Utilisez la commande &amp;quot;new&amp;quot; de Hugo pour créer le squelette d'un thème. Cela crée la structure du répertoire et place les fichiers vides à remplir.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo new theme zafta
$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes
$ find themes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/
list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/
single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/
footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/
header.html
-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml
$
&lt;/code>&lt;/pre>&lt;p>Le squelette comprend des modèles (les fichiers se terminant par .html), un fichier de licence, une description de votre thème (le fichier theme.toml) et un archétype vide.&lt;/p>
&lt;p>Prenez une minute pour remplir les fichiers theme.toml et LICENSE.md. Ils sont facultatifs, mais si vous allez distribuer votre thème, il dit au monde qui féliciter (ou blâmer). Il est également agréable de déclarer la licence afin que les gens sachent comment ils peuvent utiliser le thème.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/theme.toml
author = &amp;#34;michael d henderson&amp;#34;
description = &amp;#34;Un thème minimal fonctionnel&amp;#34;
license = &amp;#34;MIT&amp;#34;
name = &amp;#34;zafta&amp;#34;
source_repo = &amp;#34;&amp;#34;
tags = [&amp;#34;tags&amp;#34;, &amp;#34;categories&amp;#34;]
:wq
## éditez également themes/zafta/LICENSE.md et changez
## l&amp;#39;emplacement où il est écrit &amp;#34;YOUR_NAME_HERE&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Notez que les fichiers du squelette du thème sont vides. Ne vous inquiètez pas, nous allons remédier à cela rapidement.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/
list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/
single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/
index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/
footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/
header.html
$
&lt;/code>&lt;/pre>&lt;h3 id="mettre-à-jour-le-fichier-de-configuration-pour-utiliser-notre-thème">Mettre à jour le fichier de configuration pour utiliser notre thème&lt;/h3>
&lt;p>Maintenant que nous avons un thème sur lequel travailler, il est judicieux d'ajouter le nom du thème au fichier de configuration. Ceci est facultatif, car vous pouvez toujours ajouter &amp;quot;-t zafta&amp;quot; à toutes vos commandes. J'aime mettre le fichier de configuration car j'aime les lignes de commande plus courtes. Si vous ne le placez pas dans le fichier de configuration ou ne le spécifiez pas sur la ligne de commande, vous n'utiliserez pas le modèle que vous attendez.&lt;/p>
&lt;p>Modifiez le fichier pour ajouter le thème, ajoutez un titre pour le site et spécifiez que tout notre contenu utilisera le format TOML.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi config.toml
theme = &amp;#34;zafta&amp;#34;
baseurl = &amp;#34;&amp;#34;
languageCode = &amp;#34;en-us&amp;#34;
title = &amp;#34;zafta - totally refreshing&amp;#34;
MetaDataFormat = &amp;#34;toml&amp;#34;
:wq
$
&lt;/code>&lt;/pre>&lt;h3 id="générer-le-site">Générer le site&lt;/h3>
&lt;p>Maintenant que nous avons un thème vide, générez le site à nouveau.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
/Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
/Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;p>Avez-vous remarqué que la sortie est différente? Le message d'avertissement pour la page d'accueil a disparu et nous avons une ligne d'information supplémentaire indiquant que Hugo est en train de se synchroniser avec le répertoire du thème.&lt;/p>
&lt;p>Vérifions le répertoire public/ pour voir ce que Hugo a généré.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l public
total 16
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css
-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html
-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js
-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;p>Notez quatre choses:&lt;/p>
&lt;ol>
&lt;li>Hugo a créé une page d'accueil. C'est le fichier public/index.html.&lt;/li>
&lt;li>Hugo a créé un répertoire css/.&lt;/li>
&lt;li>Hugo a créé un répertoire js/.&lt;/li>
&lt;li>Hugo a affirmé avoir créé 0 pages. Il a créé un fichier et copié sur des fichiers statiques, mais n'a pas créé de pages. C'est parce qu'il considère une «page» comme un fichier créé directement à partir d'un fichier de contenu. Il ne compte pas les choses comme les fichiers index.html qu'il crée automatiquement.&lt;/li>
&lt;/ol>
&lt;h4 id="la-page-daccueil-1">La page d'accueil&lt;/h4>
&lt;p>Hugo prend en charge plusieurs types de modèles différents. La page d'accueil est spéciale car elle possède son propre type de modèle et son propre fichier modèle. Le fichier, layouts/index.html, sert à générer le HTML pour la page d'accueil. La documentation de Hugo indique que c'est le seul modèle requis, mais cela dépend. Le message d'avertissement d'Hugo montre qu'il recherche trois modèles différents:&lt;/p>
&lt;pre tabindex="0">&lt;code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html
_default/single.html]
&lt;/code>&lt;/pre>&lt;p>S'il ne trouve aucun de ces derniers, il saute complètement la création de la page d'accueil. Nous avons remarqué que lorsque nous avons construit le site sans avoir un thème installé.&lt;/p>
&lt;p>Lorsque Hugo a créé notre thème, il a créé un modèle de page d'accueil vide. Maintenant, lorsque nous construisons le site, Hugo trouve le modèle et l'utilise pour générer le HTML pour la page d'accueil. Comme le fichier modèle est vide, le fichier HTML est également vide. Si le modèle avait eu des règles, Hugo les aurait utilisé pour générer la page d'accueil.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find . -name index.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$
&lt;/code>&lt;/pre>&lt;h4 id="la-magie-du-statique">La magie du statique&lt;/h4>
&lt;p>Hugo fait deux choses lors de la génération du site. Il utilise des modèles pour transformer le contenu en HTML et copie des fichiers statiques dans le site. Contrairement au contenu, les fichiers statiques ne sont pas transformés. Ils sont copiés exactement comme ils sont.&lt;/p>
&lt;p>Hugo suppose que votre site utilisera à la fois CSS et JavaScript, de sorte qu'il crée des répertoires sur votre thème pour les retenir. Rappelez-vous les philosophies ? Eh bien, la philosophie de Hugo est que vous allez stocker votre CSS dans un répertoire nommé css/ et votre JavaScript dans un répertoire nommé js/. Si vous n'aimez pas cela, vous pouvez modifier les noms de répertoire dans votre répertoire de thème ou même les supprimer complètement. Hugo est assez agréable pour offrir son avis, puis bien se comporter si vous êtes en désaccord.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js
$
&lt;/code>&lt;/pre>&lt;h2 id="le-cycle-de-développement-dun-site">Le cycle de développement d'un site&lt;/h2>
&lt;p>Lorsque vous travaillez sur un thème, vous modifiez le répertoire du thème, reconstruisez le site et vérifiez vos modifications dans le navigateur. Hugo rend cela très simple:&lt;/p>
&lt;ol>
&lt;li>Purgez le répertoire public/.&lt;/li>
&lt;li>Exécutez le serveur Web intégré en mode surveillance.&lt;/li>
&lt;li>Ouvrez votre site dans un navigateur.&lt;/li>
&lt;li>Mettre à jour le thème.&lt;/li>
&lt;li>Regardez la fenêtre de votre navigateur pour voir les changements.&lt;/li>
&lt;li>Revenez à l'étape 4.&lt;/li>
&lt;/ol>
&lt;p>Je vais vous donner un conseil: ne jamais travailler sur un thème sur un site en production. Toujours travailler sur une copie de votre site. Effectuez des modifications sur votre thème, testez-les, puis copiez-les sur votre site. Pour plus de sécurité, utilisez un outil comme Git pour garder un historique de révision de votre contenu et de votre thème. Croyez-moi quand je dis qu'il est trop facile de perdre vos changements.&lt;/p>
&lt;p>Consultez le site Hugo principal pour obtenir de l'information sur l'utilisation de Git avec Hugo.&lt;/p>
&lt;h3 id="purger-le-répertoire-public">Purger le répertoire public/&lt;/h3>
&lt;p>Lors de la génération du site, Hugo va créer de nouveaux fichiers et mettre à jour les existants dans le répertoire &lt;code>public /&lt;/code>. Il ne supprimera pas les fichiers qui ne sont plus utilisés. Par exemple, les fichiers créés dans le mauvais répertoire ou avec le mauvais titre resteront. Si vous les laissez, vous pourriez les confondre plus tard. Je recommande de nettoyer votre site avant de le générer.&lt;/p>
&lt;p>Remarque: Si vous utilisez un SSD, vous devez ignorer cela. L'agitation sur un SSD peut être coûteuse.&lt;/p>
&lt;h3 id="loption-watch-de-hugo">L'option watch de Hugo&lt;/h3>
&lt;p>L'option &amp;quot;&lt;code>--watch&lt;/code>&amp;quot; de Hugo va surveiller les changements dans le répertoire content/ et les répertoire de vos thème afin de regénérer le site automatiquement.&lt;/p>
&lt;h3 id="rchargement-en-direct">Rchargement en direct&lt;/h3>
&lt;p>Le serveur web intégré de Hugo supporte les rechargements en direct. Lorsque qu'une page est sauvegardée sur le serveur, le navigateur est amené à rafraîchir la page. Habituellement, cela se produit avant que vous puissiez dire &amp;quot;Woah, c'est incroyable.&amp;quot;&lt;/p>
&lt;h3 id="commandes-de-développement">Commandes de développement&lt;/h3>
&lt;p>Utilisez les commandes suivantes comme base de votre workflow.&lt;/p>
&lt;pre tabindex="0">&lt;code>## Purger les anciens fichiers. Hugo recréera le répertoire public.
##
$ rm -rf public
##
## Lancer Hugo en mode de surveillance
##
$ hugo server --watch --verbose
&lt;/code>&lt;/pre>&lt;p>L'exemple de sortie suivant montre que Hugo detecte une modification sur le modèle de la page d'accueil. Après l'avoir générée, le serveur web va automatiquement recharger la page. Je l'ai dit précédement, c'est incroyable.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
/Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
/Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&amp;#34;/Users/quoha/Sites/zafta/themes/zafta/
layouts/index.html&amp;#34;: MODIFY|ATTRIB]
Change detected, rebuilding site
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 1 ms
&lt;/code>&lt;/pre>&lt;h2 id="mettre-à-jour-le-modèle-de-la-page-daccueil">Mettre à jour le modèle de la page d'accueil&lt;/h2>
&lt;p>La page d'accueil est l'une des quelques pages spéciales que Hugo crée automatiquement. Comme mentionné précédemment, il recherche l'un des trois fichiers dans le répertoire de mise en page (layout/) du thème:&lt;/p>
&lt;ol>
&lt;li>index.html&lt;/li>
&lt;li>_default/list.html&lt;/li>
&lt;li>_default/single.html&lt;/li>
&lt;/ol>
&lt;p>Nous pourrions mettre à jour l'un des modèles par défaut, mais une bonne décision de conception est de mettre à jour le modèle le plus spécifique disponible. Ce n'est pas une règle difficile et rapide (en fait, nous ne la respecterons pas plusieurs fois dans ce tutoriel), mais c'est une bonne généralisation.&lt;/p>
&lt;h3 id="créer-une-page-daccueil-statique">Créer une page d'accueil statique&lt;/h3>
&lt;p>À l'heure actuelle, cette page est vide car nous n'avons aucun contenu et nous n'avons aucune logique dans le modèle. Changeons cela en ajoutant du texte au modèle.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo dit bonjour!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Générez le site web et vérifiez les résultats.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
/Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
/Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo dit bonjour!&amp;lt;/p&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="rechargement-en-direct">Rechargement en direct&lt;/h4>
&lt;p>Note: Si vous avez lancé le serveur avec l'option &lt;code>--watch&lt;/code>, vous verrez un contenu différent dans le fichier :&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo dit bonjour!&amp;lt;/p&amp;gt;
&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;script src=&amp;#34;http://&amp;#39;
+ (location.host || &amp;#39;localhost&amp;#39;).split(&amp;#39;:&amp;#39;)[0]
+ &amp;#39;:1313/livereload.js?mindelay=10&amp;#34;&amp;gt;&amp;lt;/&amp;#39;
+ &amp;#39;script&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Lorsque vous utilisez &lt;code>--watch&lt;/code>, le script de rechargement automatique est ajouté par Hugo. Renseignez-vous dans la documentation avec les termes &lt;em>live reload&lt;/em> pour voir qu'est-ce qu'il fait et comment le désactiver.&lt;/p>
&lt;h3 id="créer-une-page-daccueil-dynamique">Créer une page d'accueil &amp;quot;dynamique&amp;quot;&lt;/h3>
&lt;p>&amp;quot;Une page d'accueil dynamique ?&amp;quot; Hugo est un générateur de site statique, cela paraît étrange à dire. Je veux dire que la page d'accueil reflète le contenu du site chaque fois que Hugo le regénère. Nous allons utiliser l'itération dans le modèle pour faire cela.&lt;/p>
&lt;h4 id="créer-un-nouvel-article">Créer un nouvel article&lt;/h4>
&lt;p>Maintenant que nous avons la page d'accueil générée avec un contenu statique, ajoutons du contenu au site. Nous allons lister ces articles sur la page d'accueil et sur leurs propre page également.&lt;/p>
&lt;p>Hugo a une commande pour générer un squelette d'article, comme il le fait pour les sites et les thèmes.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose new post/permier.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/premier.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/
default.md
ERROR: 2014/09/29 Unable to Cast &amp;lt;nil&amp;gt; to map[string]interface{}
$
&lt;/code>&lt;/pre>&lt;p>C'est pas bon, n'est-ce pas ?&lt;/p>
&lt;p>La commande &amp;quot;new&amp;quot; utilise un archétype pour créer le fichier de l'article. Hugo crée un fichier d'archétype vide par défault, mais cela provoque une erreur lorsqu'il y a un thème. Pour moi, la solution était de créer un fichier d'archétype spécifiquement pour le type article.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/archetypes/post.md
+++
Description = &amp;#34;&amp;#34;
Tags = []
Categories = []
+++
:wq
$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md
$ hugo --verbose new post/premier.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/premier.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/
post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/premier.md
/Users/quoha/Sites/zafta/content/post/premier.md created
$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/
post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created
$ ls -l content/post
total 16
-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 premier.md
-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md
$ cat content/post/premier.md
+++
Categories = []
Description = &amp;#34;&amp;#34;
Tags = []
date = &amp;#34;2014-09-29T21:54:53-05:00&amp;#34;
title = &amp;#34;premier&amp;#34;
+++
Mon permier article
$ cat content/post/second.md
+++
Categories = []
Description = &amp;#34;&amp;#34;
Tags = []
date = &amp;#34;2014-09-29T21:57:09-05:00&amp;#34;
title = &amp;#34;second&amp;#34;
+++
Mon second article
$
&lt;/code>&lt;/pre>&lt;p>Générez le site web et vérifiez le résultat.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
/Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
/Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;,
&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$
&lt;/code>&lt;/pre>&lt;p>La sortie annonce qu'il a créé 2 pages. Ce sont nos nouveaux articles:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/premier/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html
$
&lt;/code>&lt;/pre>&lt;p>Les nouveaux fichiers sont vides parce que les modèles utilisé pour générer le contenu sont vides. La page d'accueil n'affiche pas non plus le nouveau contenu. Nous devons modifier les modèles pour ajouter les articles.&lt;/p>
&lt;h3 id="modèles-de-liste-et-simples">Modèles de liste et simples&lt;/h3>
&lt;p>Avec Hugo, nous avons trois principaux types de modèles. Il y a le modèle de page d'accueil que nous avons édité précédement. Il est utilisé seulement pour la page d'accueil. Nous avons également le modèles simple qui sont utilisés pour générer du contenu simple. Et nous avons les modèles de liste qui sont utilisés pour grouper plusieurs contenus.&lt;/p>
&lt;p>D'une manière générale, les modèles de liste sont nommés &amp;quot;list.html&amp;quot; et les modèles simples sont nommés &amp;quot;single.html&amp;quot;.&lt;/p>
&lt;h3 id="ajouter-du-contenu-sur-la-page-daccueil">Ajouter du contenu sur la page d'accueil&lt;/h3>
&lt;p>La page d'accueil contiendra une liste d'articles. Modifions son modèle pour ajouter les articles que nous venons de créer. La logique dans le modèle s'éxecutera chaque fois que nous génèrerons notre site.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Hugo utilise le moteur de modèle de Go. Ce moteur analyse les fichiers de modèle pour y trouver des commandes qui sont spécifiées entre &amp;quot;{{&amp;quot; et &amp;quot;}}&amp;quot;. Dans notre modèle, les commandes sont:&lt;/p>
&lt;ol>
&lt;li>range&lt;/li>
&lt;li>.Title&lt;/li>
&lt;li>end&lt;/li>
&lt;/ol>
&lt;p>La commande &amp;quot;range&amp;quot; est un itérateur. Nous allons l'utiliser pour parcourir les dix premières pages. Chaque fichier HTML que Hugo crée est traité comme une page. Donc, boucler autour de la liste des pages examinera chaque fichier qui a été crée.&lt;/p>
&lt;p>La commande &amp;quot;.Title&amp;quot; affiche la valeur de la variable &amp;quot;title&amp;quot;. Hugo la récupère depuis la section liminaire dans la fichier Markdown.&lt;/p>
&lt;p>La commande &amp;quot;end&amp;quot; signale la fin de l'itération. Le moteur retourne en haut de l'itération lorsque qu'il trouve &amp;quot;end&amp;quot;. Tout ce qui est entre &amp;quot;range&amp;quot; et &amp;quot;end&amp;quot; est évalué chaque fois que le moteur passe par l'itération. Dans ce fichier, cela va afficher le titre des dix premières pages dans la sortie comme titre de niveau 1.&lt;/p>
&lt;p>Il est utile de se rappeler de quelques variables, comme .Data, sont créées avant tout fichier de sortie. Hugo charge tout les fichiers de contenu dans la variable et donne une chance au modèle de procèder avant de créer les fichiers HTML.&lt;/p>
&lt;p>Générez le site web et vérifiez le résultat.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
/Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
/Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;,
&amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/premier/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;premier&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;p>Félicitation, la page d'accueil affiche le titre des deux articles. Les articles eux-même sont toujours vide, mais prenez un moment pour apprécier ce que nous avons effectué. Votre modèle génère maintenant des sorties dynamiquement. Croyez-le ou non, en insérant la commande &amp;quot;range&amp;quot; à l'intérieur de ces accolades, vous avez appris tout ce que vous devez savoir pour créer un thème. Tout ce qu'il reste vraiment est de comprendre quel modèle va être utilisé pour générer chaque fichier de contenu et de devenir familier avec les commandes du moteur de modèles.&lt;/p>
&lt;p>Et, si c'est entièrement vrai, ce tutoriel devrai être plus court. Il y a quelques choses à savoir qui rendrons la création de nouveaux thèmes plus facile. Ne vous inquiétez pas, ca va bien se passer.&lt;/p>
&lt;h3 id="ajouter-du-contenu-à-larticle">Ajouter du contenu à l'article&lt;/h3>
&lt;p>Nous travaillons avec des articles, qui sont stockés dans le répertoire content/post/. Cela signifie que leur section est &amp;quot;post&amp;quot; (et si nous n'avons rien fait de travers, leur type est également &amp;quot;post&amp;quot;).&lt;/p>
&lt;p>Hugo utilise la section et le type pour définir le modèle pour chaque partie du contenu. Hugo va d'abord chercher un modèle qui correspond à la section ou au type. S'il n'arrive pas à en trouver un, il va alors chercher dans le répertoire _default/. Il y a quelques cas que nous allons couvrir lorsque nous travaillerons avec les catégories et les tags, mais pour le moment, nous supposerons que Hugo va essayer post/single.html, puis _default/single.html.&lt;/p>
&lt;p>Maintenant que nous connaissons la règle de rechercher, regardons ce qui est mis à notre disposition actuellement:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/
single.html
&lt;/code>&lt;/pre>&lt;p>Nous pourrions créer un nouveau modèle, post/single.html, ou modifier le modèle par défaut. Comme nous n'utilisons actuellement aucun autre type de contenu, commençons par mettre à jour le modèle par défaut.&lt;/p>
&lt;p>Sovenez-vous, tout contenu pour lequel nous n'avons pas créé de modèle utilisera ce modèle. Cela peut être bien ou mauvais. Mauvais parce que je sais que nous allons ajouter d'autres types de contenu et nous allons devoir annuler certaines des modifications que nous avons effectuées. Mais c'est bien parce que nous allons pouvoir voir directement les résultats. C'est également bien de démarrer ici car nous pouvons commencer à faire la mise en place basique du site. Comme nous ajouterons plus de contenu, nous remanierons ce fichier et déplacerons la logique ailleur. Hugo fait cela plutôt bien, donc nous accepterons le coût et procèderons.&lt;/p>
&lt;h4 id="mise-à-jour-du-modèle">Mise à jour du modèle&lt;/h4>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Générez le site web et vérifiez le résultat.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
/Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
/Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;,
&amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/premier/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html
$ cat public/post/premier/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;premier&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;premier&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Mon premier article&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$ cat public/post/second/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;second&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Mon second article&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;p>Notez que les articles ont maintenant un contenu. Vous pouvez aller sur localhost:1313/post/premier pour vérifier.&lt;/p>
&lt;h3 id="lier-du-contenu">Lier du contenu&lt;/h3>
&lt;p>Les articles sont sur la page d'accueil. Ajoutons un lien d'ici vers l'article. Comme cela se trouve sur la page d'accueil, nous allons mettre à jour le modèle.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Générez le site web et vérifiez le résultat.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to
/Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to
/Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;,
&amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/premier/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;/post/second/&amp;#34;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;/post/premier/&amp;#34;&amp;gt;premier&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;h3 id="créer-une-liste-darticles">Créer une liste d'articles&lt;/h3>
&lt;p>Nous avons les articles affichés sur la page d'accueil et sur leur propre page. Nous avons également un fichier public/post/index.html qui est vide. Faisons en sorte qu'il liste tous les articles (pas seulement les dix premiers).&lt;/p>
&lt;p>Nous devons décider quel modèle mettre à jour. Nous allons faire une liste, donc, cela doit être un modèle de liste. Regardons quels modèles de liste sont disponibles.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/
list.html
&lt;/code>&lt;/pre>&lt;p>Comme pour l'article seul, nous devons décider d'éditer _default/list.html ou de créer post/list.html. Nous n'avons toujours pas plusieurs types de contenu, alors restons cohérant et éditons le modèle de liste par défaut.&lt;/p>
&lt;h2 id="création-dune-page-de-haut-niveau">Création d'une page de haut niveau&lt;/h2>
&lt;p>Ajoutons une page &amp;quot;à propos&amp;quot; et affichons la au plus haut niveau (à l'opposé d'un sous-niveau comme nous avons fait pour les articles).&lt;/p>
&lt;p>La valeur par défaut de Hugo consiste à utiliser la structure du répertoire content/ pour guider l'emplacement du HTML généré dans le répertoire public/. Vérifions cela en créant une page &amp;quot;à propos&amp;quot; (about dans l'exemple) au plus haut niveau:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi content/about.md
+++
title = &amp;#34;about&amp;#34;
description = &amp;#34;about this site&amp;#34;
date = &amp;#34;2014-09-27&amp;#34;
slug = &amp;#34;about time&amp;#34;
+++
## about us
i&amp;#39;m speechless
:wq
&lt;/code>&lt;/pre>&lt;p>Générez le site web et vérifiez le résultat.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/premier-post/
index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/
index.html
&lt;/code>&lt;/pre>&lt;p>Notez que la page n'a pas été crée au plus haut niveau. Ça a créé un sous répertoire nommé 'about-time'. Ce nom vient de notre slug. Hugo va l'utiliser pour nommer les contenu générés.&lt;/p>
&lt;p>Autre chose : regardez la page d'accueil.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/theme/&amp;#34;&amp;gt;
creating a new theme&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/about-time/&amp;#34;&amp;gt;about&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/second-post/&amp;#34;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/premier-post/&amp;#34;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;script src=&amp;#34;http://&amp;#39;
+ (location.host || &amp;#39;localhost&amp;#39;).split(&amp;#39;:&amp;#39;)[0]
+ &amp;#39;:1313/livereload.js?mindelay=10&amp;#34;&amp;gt;&amp;lt;/&amp;#39;
+ &amp;#39;script&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Notez que le liens vers &amp;quot;about&amp;quot; est listé avec les articles. Ce n'était l'effet désire, corrigeons donc cela d'abord.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;articles&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;#34;post&amp;#34;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if eq .Type &amp;#34;page&amp;#34; }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;p>Générez le site web et vérifiez le résultat. La page d'accueil a deux sections, articles et pages, et chaque section contient le bon ensemble de lien&lt;/p>
&lt;p>Mais la page &amp;quot;à propos&amp;quot; est toujours rendue dans about-time/index.html.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/premier-post/
index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/
index.html
&lt;/code>&lt;/pre>&lt;p>Sachant que Hugo utilise le slug pour générer les noms des fichiers, la solution la plus simple serait de changer le slug. Utilisons la manière forte et changeons le lien permanent dans la configuration.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi config.toml
[permalinks]
page = &amp;#34;/:title/&amp;#34;
about = &amp;#34;/:filename/&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Générez le site web et vérifiez que cela ne fonctionne pas. Hugo laisse le slug ou l'URL outrepasser l'option des liens permanents dans le fichier de configuration. Commentez le slug dans content/about.md, puis générez le site web pour qu'elle soit générée au bon endroit.&lt;/p>
&lt;h2 id="partager-des-modèles">Partager des modèles&lt;/h2>
&lt;p>Si vous avez suivi, vous avez sûrement remarqué que les articles ont un titre dans le navigateur et pas la page d'accueil. C'est parce que nous n'avons pas mis de titre dans le modèle de la page d'accueil (layout/index.html). C'est quelque chose de facile, mais utilisons une option différente.&lt;/p>
&lt;p>Nous pouvons placer les parties communes dans un modèle partagé qui sera stocké dans le répertoire themes/zafta/layouts/partials/.&lt;/p>
&lt;h3 id="création-du-modèle-partiel-de-lentête-et-du-pied-de-page">Création du modèle partiel de l'entête et du pied de page&lt;/h3>
&lt;p>Avec Hugo, un modèle partiel est un modèle embelli. Normalement, un modèle fait référence à un chemin spécifique. Les modèles partiels sont différents. Hugo les recherche le long d'un chemin de recherche défini. Cela permet aux utilisateurs finaux de remplacer plus facilement la présentation du thème.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/partials/header.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
:wq
$ vi themes/zafta/layouts/partials/footer.html
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;h3 id="modification-du-modèle-de-page-daccueil-pour-utiliser-les-modèles-partiels">Modification du modèle de page d'accueil pour utiliser les modèles partiels&lt;/h3>
&lt;p>La différence notable entre un appel d'un modèle et celui d'un modèle partiel est le manque de chemin:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ template &amp;#34;theme/partials/header.html&amp;#34; . }}
&lt;/code>&lt;/pre>&lt;p>versus&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ partial &amp;#34;header.html&amp;#34; . }}
&lt;/code>&lt;/pre>&lt;p>Les deux passent dans le contexte.&lt;/p>
&lt;p>Changeons le modèle de la page d'accueil pour utiliser ces nouveaux modèles partiels.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;articles&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;#34;post&amp;#34;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if or (eq .Type &amp;#34;page&amp;#34;) (eq .Type &amp;#34;about&amp;#34;) }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Type }} -
{{ .Title }} - {{ .RelPermalink }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Générez le site web et vérifiez le résultat. Le titre sur la page d'accueil est maintenant &amp;quot;your title here&amp;quot;, qui de la variable &amp;quot;title&amp;quot; dans la fichier config.toml.&lt;/p>
&lt;h3 id="modification-du-modèle-simple-par-défaut-pour-utiliser-les-modèles-partiels">Modification du modèle simple par défaut pour utiliser les modèles partiels&lt;/h3>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Générez le site web et vérifiez le résultat. Le titre sur les articles et la page &amp;quot;a propos&amp;quot; devrait tout les deux refléter la valeur présente dans le fichier markdown.&lt;/p>
&lt;h2 id="ajouter-la-date-de-publication-des-articles">Ajouter la &amp;quot;Date de publication&amp;quot; des articles&lt;/h2>
&lt;p>Il est commun de voir la date à laquelle un article a été écrit ou publié, donc ajoutons cela. La section liminaire de notre article possède une variable nommée &amp;quot;date&amp;quot;. C'est généralement la date de la création du contenu, mais supposons que c'est la valeur que nous souhaitons afficher.&lt;/p>
&lt;h3 id="ajouter-la-date-de-publication-au-modèle">Ajouter la &amp;quot;Date de publication&amp;quot; au modèle&lt;/h3>
&lt;p>Nous allons commencer par modifier le modèle utilisé pour rendre les articles. Le code du modèle ressemblera à cela:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}
&lt;/code>&lt;/pre>&lt;p>Les articles utilisent le modèle simple par défaut, donc nous modifierons ce fichier.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Générez le site web et vérifiez le résultat. Les articles ont maintenant la date affiché. Mais il y a un problème, la page &amp;quot;a propos&amp;quot; a également la date d'affichée.&lt;/p>
&lt;p>Comme d'habiture, il y a différent moyens d'afficher la date seulement sur les articles. Nous pourrions utiliser un &amp;quot;if&amp;quot; comme nous l'avons fait sur la page d'accueil. Une autre méthode serait de créer un modèle séparer pour les articles.&lt;/p>
&lt;p>La solution du &amp;quot;if&amp;quot; fonctionne pour les site n'ayant que quelques types de contenu. Il s'harmonise avec le principe du &amp;quot;code pour aujourd'hui&amp;quot;, aussi.&lt;/p>
&lt;p>Admettons que nous avons rendu notre site tellement complexe que nous estimons qu'il faut créer un nouveau type de modèle. En langage Hugo, nous allons créer un modèle de section.&lt;/p>
&lt;p>Restaurons le modèle simple par défaut avant d'oublier.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Maintenant, nous allons modifier le modèle simple des articles. Si vous vous souvenez des règles d'Hugo, le moteur de modèles va utiliser cette version à la place de celle par défaut.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/post/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Notez que nous retirons la logique de la date dans le modèle par défaut et que nous la plaçons dans le modèle des articles. Générez le site web et vérifiez le résultat. Les articles ont leur dates et la page &amp;quot;a propos&amp;quot; non.&lt;/p>
&lt;h3 id="ne-répètez-pas-cela-vous-même">Ne répètez pas cela vous-même&lt;/h3>
&lt;p>DRY (Don't Repeat Yourself) est un bon objectif de conception et Hugo fait du bon boulot pour supporter cette idée. Une partie de l'art du bon modèle est de savoir quand il faut ajouter un nouveau modèle ou quand il faut modifier un existant. Avant de saisir complétement ce principe, faites vous à l'idée que vous allez devoir faire de la refactorisation. Hugo rend cela facile et rapide, il est donc préférable de diviser un modèle.&lt;/p></description><category domain="https://Tri0mpheL.github.io/categories/hugo/">Hugo</category></item><item><title>(Hu)go Template Primer</title><link>https://Tri0mpheL.github.io/posts/goisforlovers/</link><guid isPermaLink="true">https://Tri0mpheL.github.io/posts/goisforlovers/</guid><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><author>reuixiy@gmail.com (coyote)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>Hugo uses the excellent &lt;a href="https://golang.org/">Go&lt;/a> &lt;a href="https://golang.org/pkg/html/template/">html/template&lt;/a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.&lt;/p>
&lt;p>This document is a brief primer on using Go templates. The &lt;a href="https://golang.org/pkg/html/template/">Go docs&lt;/a>
provide more details.&lt;/p>
&lt;h2 id="introduction-to-go-templates">Introduction to Go Templates&lt;/h2>
&lt;p>Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that Go templates parse very quickly.&lt;/p>
&lt;p>A unique characteristic of Go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href="https://golang.org/pkg/html/template/">Go docs&lt;/a>.&lt;/p>
&lt;h2 id="basic-syntax">Basic Syntax&lt;/h2>
&lt;p>Golang templates are HTML files with the addition of variables and
functions.&lt;/p>
&lt;p>&lt;strong>Go variables and functions are accessible within {{ }}&lt;/strong>&lt;/p>
&lt;p>Accessing a predefined variable &amp;quot;foo&amp;quot;:&lt;/p>
&lt;pre>&lt;code>{{ foo }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Parameters are separated using spaces&lt;/strong>&lt;/p>
&lt;p>Calling the add function with input of 1, 2:&lt;/p>
&lt;pre>&lt;code>{{ add 1 2 }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Methods and fields are accessed via dot notation&lt;/strong>&lt;/p>
&lt;p>Accessing the Page Parameter &amp;quot;bar&amp;quot;&lt;/p>
&lt;pre>&lt;code>{{ .Params.bar }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Parentheses can be used to group items together&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="variables">Variables&lt;/h2>
&lt;p>Each Go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href="https://Tri0mpheL.github.io/layout/variables">variables&lt;/a> page.&lt;/p>
&lt;p>A variable is accessed by referencing the variable name.&lt;/p>
&lt;pre>&lt;code>&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>Variables can also be defined and referenced.&lt;/p>
&lt;pre>&lt;code>{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code>&lt;/pre>
&lt;h2 id="functions">Functions&lt;/h2>
&lt;p>Go template ship with a few functions which provide basic functionality. The Go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href="https://Tri0mpheL.github.io/layout/functions">Hugo template
functions&lt;/a> provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ add 1 2 }}
&lt;/code>&lt;/pre>
&lt;h2 id="includes">Includes&lt;/h2>
&lt;p>When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code>&lt;/pre>
&lt;h2 id="logic">Logic&lt;/h2>
&lt;p>Go templates provide the most basic iteration and conditional logic.&lt;/p>
&lt;h3 id="iteration">Iteration&lt;/h3>
&lt;p>Just like in Go, the Go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p>
&lt;p>&lt;strong>Example 1: Using Context&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ range array }}
{{ . }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: Declaring value variable name&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{range $element := array}}
{{ $element }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: Declaring key and value variable name&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{range $index, $element := array}}
{{ $index }}
{{ $element }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;h3 id="conditionals">Conditionals&lt;/h3>
&lt;p>If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code>end&lt;/code>.&lt;/p>
&lt;p>Go Templates treat the following values as false:&lt;/p>
&lt;ul>
&lt;li>false&lt;/li>
&lt;li>0&lt;/li>
&lt;li>any array, slice, map, or string of length zero&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example 1: If&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: If -&amp;gt; Else&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;alt&amp;quot; }}
{{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
{{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 3: And &amp;amp; Or&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 4: With&lt;/strong>&lt;/p>
&lt;p>An alternative way of writing &amp;quot;if&amp;quot; and then referencing the same value
is to use &amp;quot;with&amp;quot; instead. With rebinds the context &lt;code>.&lt;/code> within its scope,
and skips the block if the variable is absent.&lt;/p>
&lt;p>The first example above could be simplified as:&lt;/p>
&lt;pre>&lt;code>{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 5: If -&amp;gt; Else If&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;alt&amp;quot; }}
{{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
{{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="pipes">Pipes&lt;/h2>
&lt;p>One of the most powerful components of Go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline's output becomes the
input of the following pipe.&lt;/p>
&lt;p>Because of the very simple syntax of Go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p>
&lt;p>A few simple examples should help convey how to use the pipe.&lt;/p>
&lt;p>&lt;strong>Example 1 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if eq 1 1 }} Same {{ end }}
&lt;/code>&lt;/pre>
&lt;p>is the same as&lt;/p>
&lt;pre>&lt;code>{{ eq 1 1 | if }} Same {{ end }}
&lt;/code>&lt;/pre>
&lt;p>It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p>
&lt;p>&lt;strong>Example 2 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code>&lt;/pre>
&lt;p>Access the page parameter called &amp;quot;disqus_url&amp;quot; and escape the HTML.&lt;/p>
&lt;p>&lt;strong>Example 3 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>Could be rewritten as&lt;/p>
&lt;pre>&lt;code>{{ isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="context-aka-the-dot">Context (aka. the dot)&lt;/h2>
&lt;p>The most easily overlooked concept to understand about Go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code> {{ $title := .Site.Title }}
{{ range .Params.tags }}
&amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p>
&lt;h1 id="hugo-parameters">Hugo Parameters&lt;/h1>
&lt;p>Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p>
&lt;h2 id="using-content-page-parameters">Using Content (page) Parameters&lt;/h2>
&lt;p>In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a href="https://Tri0mpheL.github.io/content/front-matter">front matter&lt;/a>.&lt;/p>
&lt;p>An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn't make a lot of sense. We've defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p>
&lt;p>Here is the example front matter:&lt;/p>
&lt;pre tabindex="0">&lt;code>---
title: &amp;#34;Permalinks&amp;#34;
date: &amp;#34;2013-11-18&amp;#34;
aliases:
- &amp;#34;/doc/permalinks/&amp;#34;
groups: [&amp;#34;extras&amp;#34;]
groups_weight: 30
notoc: true
---
&lt;/code>&lt;/pre>&lt;p>Here is the corresponding code inside of the template:&lt;/p>
&lt;pre>&lt;code> {{ if not .Params.notoc }}
&amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
{{ .TableOfContents }}
&amp;lt;/div&amp;gt;
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="using-site-config-parameters">Using Site (config) Parameters&lt;/h2>
&lt;p>In your top-level configuration file (eg, &lt;code>config.yaml&lt;/code>) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p>
&lt;p>For instance, you might declare:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">CopyrightHTML&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">TwitterUser&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;spf13&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">SidebarRecentLimit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Within a footer layout, you might then declare a &lt;code>&amp;lt;footer&amp;gt;&lt;/code> which is only
provided if the &lt;code>CopyrightHTML&lt;/code> parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again. This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p>
&lt;pre tabindex="0">&lt;code>{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;#34;text-center&amp;#34;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code>&lt;/pre>&lt;p>An alternative way of writing the &amp;quot;if&amp;quot; and then referencing the same value
is to use &amp;quot;with&amp;quot; instead. With rebinds the context &lt;code>.&lt;/code> within its scope,
and skips the block if the variable is absent:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;#34;twitter&amp;#34;&amp;gt;
&amp;lt;a href=&amp;#34;https://twitter.com/{{.}}&amp;#34; rel=&amp;#34;author&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;/images/twitter.png&amp;#34; width=&amp;#34;48&amp;#34; height=&amp;#34;48&amp;#34; title=&amp;#34;Twitter: {{.}}&amp;#34;
alt=&amp;#34;Twitter&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code>&lt;/pre>&lt;p>Finally, if you want to pull &amp;quot;magic constants&amp;quot; out of your layouts, you can do
so, such as in this example:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;nav class=&amp;#34;recent&amp;#34;&amp;gt;
&amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;{{.RelPermalink}}&amp;#34;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
{{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code>&lt;/pre></description><category domain="https://Tri0mpheL.github.io/categories/development/">Development</category><category domain="https://Tri0mpheL.github.io/categories/golang/">golang</category><category domain="https://Tri0mpheL.github.io/tags/go/">go</category><category domain="https://Tri0mpheL.github.io/tags/golang/">golang</category><category domain="https://Tri0mpheL.github.io/tags/templates/">templates</category><category domain="https://Tri0mpheL.github.io/tags/themes/">themes</category><category domain="https://Tri0mpheL.github.io/tags/development/">development</category></item><item><title>test1111</title><link>https://Tri0mpheL.github.io/posts/my-first-blog/</link><guid isPermaLink="true">https://Tri0mpheL.github.io/posts/my-first-blog/</guid><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>reuixiy@gmail.com (coyote)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h1 id="hello">hello&lt;/h1>
&lt;p>1111111111&lt;/p>
&lt;h3 id="test1111">test1111&lt;/h3>
&lt;p>123123&lt;/p></description><category domain="https://Tri0mpheL.github.io/tags/%E5%AE%89%E5%85%A8/">安全</category><category domain="https://Tri0mpheL.github.io/tags/%E6%89%AB%E6%8F%8F/">扫描</category></item></channel></rss>